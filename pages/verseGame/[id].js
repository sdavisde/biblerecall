import styles from '../../styles/VerseGame.module.scss';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';
import arrow from '../../assets/arrow.png';
import { GetVerseIds, GetVerseData } from '../../db_access/pageData';
import $ from 'jquery';

export default function VerseGame({ verseData }) {
    const [verseComplete, setVerseComplete] = useState(false);
    const [index, setIndex] = useState(0);
    const [displayedText, setDisplayedText] = useState(verseData ? verseData.text.split(' ') : []);
    // Same in every game mode, used for coloring logic.
    const textRefs = verseData ? verseData.text.split(' ').map((word) => {
            return {
                word: word.toLowerCase(),
                length: word.length,
                processed: false
            };
        }) : null;
    const [key, setKey] = useState(null);
    const router = useRouter();

    let setGameMode = (diff) => {
        // trigger a 1 second load gif to switch between difficulties

        // if diff 1, remove all classes from displayTexts
        // if diff 2, add "background_font" class to every other displayText
        // if diff 3, add "background_font" class to every displayText
    }

    let onChange = (e) => {
        // Check that the keystroke is correct for that word
        // Highlight the word red or black depending on if it's correct
        // Move to the next word
        console.log(`onchange`);
        e.target.value = '';

        const target = textRefs[index];
        const valid = target.word[0] == key.toLowerCase();
        $(`#verse_word_${index}`)[0].classList.add(valid ? 'right' : 'wrong');

        if (index == textRefs.length) {
            setVerseComplete(true);
        }

        setIndex(prev => (prev + 1));
    };

    let onKeyDown = (e) => {
        setKey(e.key);
    }

    return (
        <>
            <Head>
                <title>Bible Recall</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.topSection}>
                    <div className={styles.title}>
                        <h1>Bible</h1>
                        <img className={styles.bible}/> 
                        <h1>Recall</h1>          
                    </div>
                </div>
                <div className={styles.bottomSection}>
                    {
                        (router.isFallback)
                        ?
                        (<div>Loading...</div>)
                        :
                        (
                        <>
                            <div className={styles.title}>
                                <h1>{verseData.book} {verseData.chapter}:{verseData.verse}</h1>
                            </div>
                            <div className={styles.cardContainer}>
                                <div className={styles.info}>
                                    <em>Type the first letter of each word to memorize this verse!</em>
                                </div>
                                <div className={styles.verseDisplay}>
                                    {displayedText.map((text, index) => 
                                        <div id={'verse_word_'+index} key={index}>{text}</div>
                                    )}
                                </div>
                                <input placeholder='Answer Here!' 
                                    onKeyDown={(e) => onKeyDown(e)}
                                    onChange={(e) => onChange(e)}
                                    className={styles.input}
                                    autoFocus />
                                <div className={styles.steps}>
                                    <div className={styles.step} onClick={() => setGameMode(1)}>
                                        Step 1
                                    </div>
                                    <div className={styles.step} onClick={() => setGameMode(2)}>
                                        Step 2
                                    </div>
                                    <div className={styles.step} onClick={() => setGameMode(3)}>
                                        Step 3
                                    </div>
                                </div>
                                    
                                <div className={styles.leftContainer}>
                                    <Link href={"/"}>
                                        <Image 
                                            src={arrow}
                                            width="50px"
                                            height="50px"    
                                        />
                                    </Link>
                                </div>
                            </div>
                        </>
                        )
                    }
                </div>
            </main>
        </>
	);
}

export async function getStaticPaths() {
    // Return a list of possible value for id
    let paths = GetVerseIds().then((paths) => {
        return {
            paths,
            fallback: true,
        };
    });

    return paths;
}

export async function getStaticProps({ params }) {
    // Fetch necessary data for the verse game using params.id
    let propsList = GetVerseData(params.id).then((verseData) => {

        console.log(`verse data: ${verseData}`);

        return {
            props: {
                verseData
            }
        };
    });

    return propsList;
}